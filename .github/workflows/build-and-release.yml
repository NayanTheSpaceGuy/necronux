name: Build & Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.build.os }}
    strategy:
      fail-fast: false
      matrix:
        build:
          - {
              NAME: linux-x64,
              OS: ubuntu-24.04,
              TARGET: x86_64-unknown-linux-gnu,
            }
          - {
              NAME: windows-x64,
              OS: windows-2022,
              TARGET: x86_64-pc-windows-msvc,
            }
          - {
              NAME: windows-arm64,
              OS: windows-2022,
              TARGET: aarch64-pc-windows-msvc,
            }
          - {
              NAME: darwin-x64,
              OS: macos-14,
              TARGET: x86_64-apple-darwin,
            }
          - {
              NAME: darwin-arm64,
              OS: macos-14,
              TARGET: aarch64-apple-darwin,
            }
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust env
        uses: "./.github/actions/setup-rust-env"

      - name: Run cargo build
        run: cargo build --release --locked --target ${{ matrix.build.TARGET }}

      - name: Rename necronux binary
        shell: bash
        run: |
          binary_name="necronux"

          extension=""
          # windows binaries have ".exe" extension
          if [[ "${{ matrix.build.OS }}" == *"windows"* ]]; then
            extension=".exe"
          fi

          mkdir bin
          cp "target/${{ matrix.build.TARGET }}/release/${binary_name}" "bin/${binary_name}-${{ matrix.build.NAME }}${extension}"

      - name: Make binaries executable (Non-Windows)
        if: "! contains(matrix.build.OS, 'windows')"
        run: chmod +x bin/*

      - name: Tar the binaries
        shell: bash
        run: |
          tar -czvf built-binaries-${{ github.run_id }}-${{ matrix.build.NAME }}.tar.gz -C bin .

      - name: Upload binary tar
        uses: actions/upload-artifact@v4
        with:
          name: built-binaries-${{ github.run_id }}-${{ matrix.build.NAME }}
          path: built-binaries-${{ github.run_id }}-${{ matrix.build.NAME }}.tar.gz

  stable-release:
    name: Release
    runs-on: ubuntu-24.04
    needs: build
    if: startsWith(github.ref_name, 'v') && !contains(github.ref_name, '-')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          path: .
          merge-multiple: true

      - name: Extract binaries
        shell: bash
        run: |
          mkdir -p bin
          for tar_file in built-binaries-*.tar.gz; do
            echo "Extracting $tar_file"
            tar -xzvf $tar_file -C bin
          done

      - name: Publish release
        uses: softprops/action-gh-release@v2
        with:
          files: bin/*
          tag_name: ${{ env.RELEASE_VERSION }}
          fail_on_unmatched_files: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  pre-release:
    name: Pre-Release
    runs-on: ubuntu-24.04
    needs: build
    if: startsWith(github.ref_name, 'v') && contains(github.ref_name, '-')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          path: .
          merge-multiple: true

      - name: Extract binaries
        shell: bash
        run: |
          mkdir -p bin
          for tar_file in built-binaries-*.tar.gz; do
            echo "Extracting $tar_file"
            tar -xzvf $tar_file -C bin
          done

      - name: Publish pre-release
        uses: softprops/action-gh-release@v2
        with:
          files: bin/*
          tag_name: ${{ env.PRE_RELEASE_VERSION }}
          fail_on_unmatched_files: true
          generate_release_notes: true
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
